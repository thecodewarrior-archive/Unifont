/*
 * The Relaxer artifact
 * Copyright (c) 2000-2004, ASAMI Tomoharu, All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer. 
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package org.doubletype.ossa.xml;

/**
 * DefaultGlyphFactory is generated by Relaxer based on glyph.rng.
 *
 * @version glyph.rng 1.0 (Tue Nov 09 20:22:48 EST 2004)
 * @author  Relaxer 1.1b (http://www.relaxer.org)
 */
public class DefaultGlyphFactory extends AbstractGlyphFactory {

    /**
     * Gets a Class of <code>XParamListParam</code>.
     *
     * @return Class
     */
    public Class getXParamListParamClass() {
        return (XParamListParam.class);
    }

    /**
     * Gets a Class of <code>XHeadGlobal</code>.
     *
     * @return Class
     */
    public Class getXHeadGlobalClass() {
        return (XHeadGlobal.class);
    }

    /**
     * Gets a Class of <code>XHeadLocal</code>.
     *
     * @return Class
     */
    public Class getXHeadLocalClass() {
        return (XHeadLocal.class);
    }

    /**
     * Gets a Class of <code>XHead</code>.
     *
     * @return Class
     */
    public Class getXHeadClass() {
        return (XHead.class);
    }

    /**
     * Gets a Class of <code>XGlyphFile</code>.
     *
     * @return Class
     */
    public Class getXGlyphFileClass() {
        return (XGlyphFile.class);
    }

    /**
     * Gets a Class of <code>XContour</code>.
     *
     * @return Class
     */
    public Class getXContourClass() {
        return (XContour.class);
    }

    /**
     * Gets a Class of <code>XPoint2d</code>.
     *
     * @return Class
     */
    public Class getXPoint2dClass() {
        return (XPoint2d.class);
    }

    /**
     * Gets a Class of <code>XInvokePos</code>.
     *
     * @return Class
     */
    public Class getXInvokePosClass() {
        return (XInvokePos.class);
    }

    /**
     * Gets a Class of <code>XInvokeArg</code>.
     *
     * @return Class
     */
    public Class getXInvokeArgClass() {
        return (XInvokeArg.class);
    }

    /**
     * Gets a Class of <code>XInvokeVarg</code>.
     *
     * @return Class
     */
    public Class getXInvokeVargClass() {
        return (XInvokeVarg.class);
    }

    /**
     * Gets a Class of <code>XInvoke</code>.
     *
     * @return Class
     */
    public Class getXInvokeClass() {
        return (XInvoke.class);
    }

    /**
     * Gets a Class of <code>XInclude</code>.
     *
     * @return Class
     */
    public Class getXIncludeClass() {
        return (XInclude.class);
    }

    /**
     * Gets a Class of <code>XModule</code>.
     *
     * @return Class
     */
    public Class getXModuleClass() {
        return (XModule.class);
    }

    /**
     * Gets a Class of <code>XBody</code>.
     *
     * @return Class
     */
    public Class getXBodyClass() {
        return (XBody.class);
    }

    /**
     * Gets a Class of <code>XStartGlyphElement</code>.
     *
     * @return Class
     */
    public Class getXStartGlyphElementClass() {
        return (XStartGlyphElement.class);
    }

    /**
     * Gets a Class of <code>XControlPoint</code>.
     *
     * @return Class
     */
    public Class getXControlPointClass() {
        return (XControlPoint.class);
    }

    /**
     * Gets a Class of <code>XHint</code>.
     *
     * @return Class
     */
    public Class getXHintClass() {
        return (XHint.class);
    }

    /**
     * Gets a Class of <code>XContourPoint</code>.
     *
     * @return Class
     */
    public Class getXContourPointClass() {
        return (XContourPoint.class);
    }

    /**
     * Gets a Class of <code>XParamList</code>.
     *
     * @return Class
     */
    public Class getXParamListClass() {
        return (XParamList.class);
    }

    /**
     * Creates a default <code>XParamListParam</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XParamListParam
     */
    public XParamListParam createXParamListParam() {
        return (new XParamListParam());
    }

    /**
     * Creates a default <code>XHeadGlobal</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XHeadGlobal
     */
    public XHeadGlobal createXHeadGlobal() {
        return (new XHeadGlobal());
    }

    /**
     * Creates a default <code>XHeadLocal</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XHeadLocal
     */
    public XHeadLocal createXHeadLocal() {
        return (new XHeadLocal());
    }

    /**
     * Creates a default <code>XHead</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XHead
     */
    public XHead createXHead() {
        return (new XHead());
    }

    /**
     * Creates a default <code>XGlyphFile</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XGlyphFile
     */
    public XGlyphFile createXGlyphFile() {
        return (new XGlyphFile());
    }

    /**
     * Creates a default <code>XContour</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XContour
     */
    public XContour createXContour() {
        return (new XContour());
    }

    /**
     * Creates a default <code>XPoint2d</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XPoint2d
     */
    public XPoint2d createXPoint2d() {
        return (new XPoint2d());
    }

    /**
     * Creates a default <code>XInvokePos</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XInvokePos
     */
    public XInvokePos createXInvokePos() {
        return (new XInvokePos());
    }

    /**
     * Creates a default <code>XInvokeArg</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XInvokeArg
     */
    public XInvokeArg createXInvokeArg() {
        return (new XInvokeArg());
    }

    /**
     * Creates a default <code>XInvokeVarg</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XInvokeVarg
     */
    public XInvokeVarg createXInvokeVarg() {
        return (new XInvokeVarg());
    }

    /**
     * Creates a default <code>XInvoke</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XInvoke
     */
    public XInvoke createXInvoke() {
        return (new XInvoke());
    }

    /**
     * Creates a default <code>XInclude</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XInclude
     */
    public XInclude createXInclude() {
        return (new XInclude());
    }

    /**
     * Creates a default <code>XModule</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XModule
     */
    public XModule createXModule() {
        return (new XModule());
    }

    /**
     * Creates a default <code>XBody</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XBody
     */
    public XBody createXBody() {
        return (new XBody());
    }

    /**
     * Creates a default <code>XStartGlyphElement</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XStartGlyphElement
     */
    public XStartGlyphElement createXStartGlyphElement() {
        return (new XStartGlyphElement());
    }

    /**
     * Creates a default <code>XControlPoint</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XControlPoint
     */
    public XControlPoint createXControlPoint() {
        return (new XControlPoint());
    }

    /**
     * Creates a default <code>XHint</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XHint
     */
    public XHint createXHint() {
        return (new XHint());
    }

    /**
     * Creates a default <code>XContourPoint</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XContourPoint
     */
    public XContourPoint createXContourPoint() {
        return (new XContourPoint());
    }

    /**
     * Creates a default <code>XParamList</code>.
     * This method is a hook method of the AbstractGlyphFactory.
     *
     * @return XParamList
     */
    public XParamList createXParamList() {
        return (new XParamList());
    }
}
