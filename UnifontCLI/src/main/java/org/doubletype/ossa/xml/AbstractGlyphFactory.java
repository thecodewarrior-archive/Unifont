/*
 * The Relaxer artifact
 * Copyright (c) 2000-2004, ASAMI Tomoharu, All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer. 
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package org.doubletype.ossa.xml;

import java.io.*;
import java.net.URL;
import javax.xml.parsers.*;
import org.w3c.dom.*;
import org.xml.sax.*;

/**
 * AbstractGlyphFactory is generated by Relaxer based on glyph.rng.
 *
 * @version glyph.rng 1.0 (Tue Nov 09 20:22:48 EST 2004)
 * @author  Relaxer 1.1b (http://www.relaxer.org)
 */
public abstract class AbstractGlyphFactory implements IGlyphFactory {
    protected org.xml.sax.ErrorHandler errorHandler;
    protected org.xml.sax.EntityResolver entityResolver;
    protected String baseUri;

    /**
     * Gets a Class of <code>XParamListParam</code>.
     *
     * @return Class
     */
    public Class getXParamListParamClass() {
        return (createXParamListParam().getClass());
    }

    /**
     * Gets a Class of <code>XHeadGlobal</code>.
     *
     * @return Class
     */
    public Class getXHeadGlobalClass() {
        return (createXHeadGlobal().getClass());
    }

    /**
     * Gets a Class of <code>XHeadLocal</code>.
     *
     * @return Class
     */
    public Class getXHeadLocalClass() {
        return (createXHeadLocal().getClass());
    }

    /**
     * Gets a Class of <code>XHead</code>.
     *
     * @return Class
     */
    public Class getXHeadClass() {
        return (createXHead().getClass());
    }

    /**
     * Gets a Class of <code>XGlyphFile</code>.
     *
     * @return Class
     */
    public Class getXGlyphFileClass() {
        return (createXGlyphFile().getClass());
    }

    /**
     * Gets a Class of <code>XContour</code>.
     *
     * @return Class
     */
    public Class getXContourClass() {
        return (createXContour().getClass());
    }

    /**
     * Gets a Class of <code>XPoint2d</code>.
     *
     * @return Class
     */
    public Class getXPoint2dClass() {
        return (createXPoint2d().getClass());
    }

    /**
     * Gets a Class of <code>XInvokePos</code>.
     *
     * @return Class
     */
    public Class getXInvokePosClass() {
        return (createXInvokePos().getClass());
    }

    /**
     * Gets a Class of <code>XInvokeArg</code>.
     *
     * @return Class
     */
    public Class getXInvokeArgClass() {
        return (createXInvokeArg().getClass());
    }

    /**
     * Gets a Class of <code>XInvokeVarg</code>.
     *
     * @return Class
     */
    public Class getXInvokeVargClass() {
        return (createXInvokeVarg().getClass());
    }

    /**
     * Gets a Class of <code>XInvoke</code>.
     *
     * @return Class
     */
    public Class getXInvokeClass() {
        return (createXInvoke().getClass());
    }

    /**
     * Gets a Class of <code>XInclude</code>.
     *
     * @return Class
     */
    public Class getXIncludeClass() {
        return (createXInclude().getClass());
    }

    /**
     * Gets a Class of <code>XModule</code>.
     *
     * @return Class
     */
    public Class getXModuleClass() {
        return (createXModule().getClass());
    }

    /**
     * Gets a Class of <code>XBody</code>.
     *
     * @return Class
     */
    public Class getXBodyClass() {
        return (createXBody().getClass());
    }

    /**
     * Gets a Class of <code>XStartGlyphElement</code>.
     *
     * @return Class
     */
    public Class getXStartGlyphElementClass() {
        return (createXStartGlyphElement().getClass());
    }

    /**
     * Gets a Class of <code>XControlPoint</code>.
     *
     * @return Class
     */
    public Class getXControlPointClass() {
        return (createXControlPoint().getClass());
    }

    /**
     * Gets a Class of <code>XHint</code>.
     *
     * @return Class
     */
    public Class getXHintClass() {
        return (createXHint().getClass());
    }

    /**
     * Gets a Class of <code>XContourPoint</code>.
     *
     * @return Class
     */
    public Class getXContourPointClass() {
        return (createXContourPoint().getClass());
    }

    /**
     * Gets a Class of <code>XParamList</code>.
     *
     * @return Class
     */
    public Class getXParamListClass() {
        return (createXParamList().getClass());
    }

    /**
     * Sets a <b>errorHandler</b>.
     *
     * @param errorHandler
     */
    public void setErrorHandler(org.xml.sax.ErrorHandler errorHandler) {
        this.errorHandler = errorHandler;
    }

    /**
     * Gets a <b>errorHandler</b>.
     *
     * @return org.xml.sax.ErrorHandler
     */
    public org.xml.sax.ErrorHandler getErrorHandler() {
        return (errorHandler);
    }

    /**
     * Sets a <b>entityResolver</b>.
     *
     * @param entityResolver
     */
    public void setEntityResolver(org.xml.sax.EntityResolver entityResolver) {
        this.entityResolver = entityResolver;
    }

    /**
     * Gets a <b>entityResolver</b>.
     *
     * @return org.xml.sax.EntityResolver
     */
    public org.xml.sax.EntityResolver getEntityResolver() {
        return (entityResolver);
    }

    /**
     * Sets a <b>baseUri</b>.
     *
     * @param baseUri
     */
    public void setBaseUri(String baseUri) {
        this.baseUri = baseUri;
    }

    /**
     * Gets a <b>baseUri</b>.
     *
     * @return String
     */
    public String getBaseUri() {
        return (baseUri);
    }

    /**
     * Creates a <code>Object</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(File file) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(String uri) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(URL url) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the copy <code>Object</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return Object
     */
    public Object create(Object source) {
        if (source instanceof XParamListParam) {
            XParamListParam node = createXParamListParam();
            node.setup((XParamListParam)source);
            return(node);
        } else if (source instanceof XHeadGlobal) {
            XHeadGlobal node = createXHeadGlobal();
            node.setup((XHeadGlobal)source);
            return(node);
        } else if (source instanceof XHeadLocal) {
            XHeadLocal node = createXHeadLocal();
            node.setup((XHeadLocal)source);
            return(node);
        } else if (source instanceof XHead) {
            XHead node = createXHead();
            node.setup((XHead)source);
            return(node);
        } else if (source instanceof XGlyphFile) {
            XGlyphFile node = createXGlyphFile();
            node.setup((XGlyphFile)source);
            return(node);
        } else if (source instanceof XContour) {
            XContour node = createXContour();
            node.setup((XContour)source);
            return(node);
        } else if (source instanceof XPoint2d) {
            XPoint2d node = createXPoint2d();
            node.setup((XPoint2d)source);
            return(node);
        } else if (source instanceof XInvokePos) {
            XInvokePos node = createXInvokePos();
            node.setup((XInvokePos)source);
            return(node);
        } else if (source instanceof XInvokeArg) {
            XInvokeArg node = createXInvokeArg();
            node.setup((XInvokeArg)source);
            return(node);
        } else if (source instanceof XInvokeVarg) {
            XInvokeVarg node = createXInvokeVarg();
            node.setup((XInvokeVarg)source);
            return(node);
        } else if (source instanceof XInvoke) {
            XInvoke node = createXInvoke();
            node.setup((XInvoke)source);
            return(node);
        } else if (source instanceof XInclude) {
            XInclude node = createXInclude();
            node.setup((XInclude)source);
            return(node);
        } else if (source instanceof XModule) {
            XModule node = createXModule();
            node.setup((XModule)source);
            return(node);
        } else if (source instanceof XBody) {
            XBody node = createXBody();
            node.setup((XBody)source);
            return(node);
        } else if (source instanceof XStartGlyphElement) {
            XStartGlyphElement node = createXStartGlyphElement();
            node.setup((XStartGlyphElement)source);
            return(node);
        } else if (source instanceof XControlPoint) {
            XControlPoint node = createXControlPoint();
            node.setup((XControlPoint)source);
            return(node);
        } else if (source instanceof XHint) {
            XHint node = createXHint();
            node.setup((XHint)source);
            return(node);
        } else if (source instanceof XContourPoint) {
            XContourPoint node = createXContourPoint();
            node.setup((XContourPoint)source);
            return(node);
        } else {
            return (null);
        }
    }

    /**
     * Creates a <code>Object</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(Document doc) throws IOException, SAXException, ParserConfigurationException {
        Object node = create(doc.getDocumentElement());
        return (node);
    }

    /**
     * Creates a <code>Object</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return Object
     */
    public Object create(Element element) throws IOException, SAXException, ParserConfigurationException {
        if (XParamListParam.isMatch(element)) {
            XParamListParam node = createXParamListParam();
            node.setup(element);
            return(node);
        } else if (XHeadGlobal.isMatch(element)) {
            XHeadGlobal node = createXHeadGlobal();
            node.setup(element);
            return(node);
        } else if (XHeadLocal.isMatch(element)) {
            XHeadLocal node = createXHeadLocal();
            node.setup(element);
            return(node);
        } else if (XHead.isMatch(element)) {
            XHead node = createXHead();
            node.setup(element);
            return(node);
        } else if (XGlyphFile.isMatch(element)) {
            XGlyphFile node = createXGlyphFile();
            node.setup(element);
            return(node);
        } else if (XContour.isMatch(element)) {
            XContour node = createXContour();
            node.setup(element);
            return(node);
        } else if (XPoint2d.isMatch(element)) {
            XPoint2d node = createXPoint2d();
            node.setup(element);
            return(node);
        } else if (XInvokePos.isMatch(element)) {
            XInvokePos node = createXInvokePos();
            node.setup(element);
            return(node);
        } else if (XInvokeArg.isMatch(element)) {
            XInvokeArg node = createXInvokeArg();
            node.setup(element);
            return(node);
        } else if (XInvokeVarg.isMatch(element)) {
            XInvokeVarg node = createXInvokeVarg();
            node.setup(element);
            return(node);
        } else if (XInvoke.isMatch(element)) {
            XInvoke node = createXInvoke();
            node.setup(element);
            return(node);
        } else if (XInclude.isMatch(element)) {
            XInclude node = createXInclude();
            node.setup(element);
            return(node);
        } else if (XModule.isMatch(element)) {
            XModule node = createXModule();
            node.setup(element);
            return(node);
        } else if (XBody.isMatch(element)) {
            XBody node = createXBody();
            node.setup(element);
            return(node);
        } else if (XStartGlyphElement.isMatch(element)) {
            XStartGlyphElement node = createXStartGlyphElement();
            node.setup(element);
            return(node);
        } else if (XControlPoint.isMatch(element)) {
            XControlPoint node = createXControlPoint();
            node.setup(element);
            return(node);
        } else if (XHint.isMatch(element)) {
            XHint node = createXHint();
            node.setup(element);
            return(node);
        } else if (XContourPoint.isMatch(element)) {
            XContourPoint node = createXContourPoint();
            node.setup(element);
            return(node);
        } else {
            return (null);
        }
    }

    /**
     * Creates a <code>XParamListParam</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XParamListParam
     */
    public XParamListParam createXParamListParam(File file) throws IOException, SAXException, ParserConfigurationException {
        XParamListParam xParamListParam_ = createXParamListParam();
        xParamListParam_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xParamListParam_);
    }

    /**
     * Creates a <code>XHeadGlobal</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHeadGlobal
     */
    public XHeadGlobal createXHeadGlobal(File file) throws IOException, SAXException, ParserConfigurationException {
        XHeadGlobal xHeadGlobal_ = createXHeadGlobal();
        xHeadGlobal_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHeadGlobal_);
    }

    /**
     * Creates a <code>XHeadLocal</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHeadLocal
     */
    public XHeadLocal createXHeadLocal(File file) throws IOException, SAXException, ParserConfigurationException {
        XHeadLocal xHeadLocal_ = createXHeadLocal();
        xHeadLocal_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHeadLocal_);
    }

    /**
     * Creates a <code>XHead</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHead
     */
    public XHead createXHead(File file) throws IOException, SAXException, ParserConfigurationException {
        XHead xHead_ = createXHead();
        xHead_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHead_);
    }

    /**
     * Creates a <code>XGlyphFile</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XGlyphFile
     */
    public XGlyphFile createXGlyphFile(File file) throws IOException, SAXException, ParserConfigurationException {
        XGlyphFile xGlyphFile_ = createXGlyphFile();
        xGlyphFile_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xGlyphFile_);
    }

    /**
     * Creates a <code>XContour</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XContour
     */
    public XContour createXContour(File file) throws IOException, SAXException, ParserConfigurationException {
        XContour xContour_ = createXContour();
        xContour_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xContour_);
    }

    /**
     * Creates a <code>XPoint2d</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XPoint2d
     */
    public XPoint2d createXPoint2d(File file) throws IOException, SAXException, ParserConfigurationException {
        XPoint2d xPoint2d_ = createXPoint2d();
        xPoint2d_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xPoint2d_);
    }

    /**
     * Creates a <code>XInvokePos</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokePos
     */
    public XInvokePos createXInvokePos(File file) throws IOException, SAXException, ParserConfigurationException {
        XInvokePos xInvokePos_ = createXInvokePos();
        xInvokePos_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokePos_);
    }

    /**
     * Creates a <code>XInvokeArg</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokeArg
     */
    public XInvokeArg createXInvokeArg(File file) throws IOException, SAXException, ParserConfigurationException {
        XInvokeArg xInvokeArg_ = createXInvokeArg();
        xInvokeArg_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokeArg_);
    }

    /**
     * Creates a <code>XInvokeVarg</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokeVarg
     */
    public XInvokeVarg createXInvokeVarg(File file) throws IOException, SAXException, ParserConfigurationException {
        XInvokeVarg xInvokeVarg_ = createXInvokeVarg();
        xInvokeVarg_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokeVarg_);
    }

    /**
     * Creates a <code>XInvoke</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvoke
     */
    public XInvoke createXInvoke(File file) throws IOException, SAXException, ParserConfigurationException {
        XInvoke xInvoke_ = createXInvoke();
        xInvoke_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvoke_);
    }

    /**
     * Creates a <code>XInclude</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInclude
     */
    public XInclude createXInclude(File file) throws IOException, SAXException, ParserConfigurationException {
        XInclude xInclude_ = createXInclude();
        xInclude_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInclude_);
    }

    /**
     * Creates a <code>XModule</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XModule
     */
    public XModule createXModule(File file) throws IOException, SAXException, ParserConfigurationException {
        XModule xModule_ = createXModule();
        xModule_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xModule_);
    }

    /**
     * Creates a <code>XBody</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XBody
     */
    public XBody createXBody(File file) throws IOException, SAXException, ParserConfigurationException {
        XBody xBody_ = createXBody();
        xBody_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xBody_);
    }

    /**
     * Creates a <code>XStartGlyphElement</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XStartGlyphElement
     */
    public XStartGlyphElement createXStartGlyphElement(File file) throws IOException, SAXException, ParserConfigurationException {
        XStartGlyphElement xStartGlyphElement_ = createXStartGlyphElement();
        xStartGlyphElement_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xStartGlyphElement_);
    }

    /**
     * Creates a <code>XControlPoint</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XControlPoint
     */
    public XControlPoint createXControlPoint(File file) throws IOException, SAXException, ParserConfigurationException {
        XControlPoint xControlPoint_ = createXControlPoint();
        xControlPoint_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xControlPoint_);
    }

    /**
     * Creates a <code>XHint</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHint
     */
    public XHint createXHint(File file) throws IOException, SAXException, ParserConfigurationException {
        XHint xHint_ = createXHint();
        xHint_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHint_);
    }

    /**
     * Creates a <code>XContourPoint</code> by the File <code>file</code>.
     * This method is a template method for concrete classes.
     *
     * @param file
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XContourPoint
     */
    public XContourPoint createXContourPoint(File file) throws IOException, SAXException, ParserConfigurationException {
        XContourPoint xContourPoint_ = createXContourPoint();
        xContourPoint_.setup(UJAXP.getDocument(file, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xContourPoint_);
    }

    /**
     * Creates a <code>XParamListParam</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XParamListParam
     */
    public XParamListParam createXParamListParam(String uri) throws IOException, SAXException, ParserConfigurationException {
        XParamListParam xParamListParam_ = createXParamListParam();
        xParamListParam_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xParamListParam_);
    }

    /**
     * Creates a <code>XHeadGlobal</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHeadGlobal
     */
    public XHeadGlobal createXHeadGlobal(String uri) throws IOException, SAXException, ParserConfigurationException {
        XHeadGlobal xHeadGlobal_ = createXHeadGlobal();
        xHeadGlobal_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHeadGlobal_);
    }

    /**
     * Creates a <code>XHeadLocal</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHeadLocal
     */
    public XHeadLocal createXHeadLocal(String uri) throws IOException, SAXException, ParserConfigurationException {
        XHeadLocal xHeadLocal_ = createXHeadLocal();
        xHeadLocal_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHeadLocal_);
    }

    /**
     * Creates a <code>XHead</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHead
     */
    public XHead createXHead(String uri) throws IOException, SAXException, ParserConfigurationException {
        XHead xHead_ = createXHead();
        xHead_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHead_);
    }

    /**
     * Creates a <code>XGlyphFile</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XGlyphFile
     */
    public XGlyphFile createXGlyphFile(String uri) throws IOException, SAXException, ParserConfigurationException {
        XGlyphFile xGlyphFile_ = createXGlyphFile();
        xGlyphFile_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xGlyphFile_);
    }

    /**
     * Creates a <code>XContour</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XContour
     */
    public XContour createXContour(String uri) throws IOException, SAXException, ParserConfigurationException {
        XContour xContour_ = createXContour();
        xContour_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xContour_);
    }

    /**
     * Creates a <code>XPoint2d</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XPoint2d
     */
    public XPoint2d createXPoint2d(String uri) throws IOException, SAXException, ParserConfigurationException {
        XPoint2d xPoint2d_ = createXPoint2d();
        xPoint2d_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xPoint2d_);
    }

    /**
     * Creates a <code>XInvokePos</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokePos
     */
    public XInvokePos createXInvokePos(String uri) throws IOException, SAXException, ParserConfigurationException {
        XInvokePos xInvokePos_ = createXInvokePos();
        xInvokePos_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokePos_);
    }

    /**
     * Creates a <code>XInvokeArg</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokeArg
     */
    public XInvokeArg createXInvokeArg(String uri) throws IOException, SAXException, ParserConfigurationException {
        XInvokeArg xInvokeArg_ = createXInvokeArg();
        xInvokeArg_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokeArg_);
    }

    /**
     * Creates a <code>XInvokeVarg</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokeVarg
     */
    public XInvokeVarg createXInvokeVarg(String uri) throws IOException, SAXException, ParserConfigurationException {
        XInvokeVarg xInvokeVarg_ = createXInvokeVarg();
        xInvokeVarg_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokeVarg_);
    }

    /**
     * Creates a <code>XInvoke</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvoke
     */
    public XInvoke createXInvoke(String uri) throws IOException, SAXException, ParserConfigurationException {
        XInvoke xInvoke_ = createXInvoke();
        xInvoke_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvoke_);
    }

    /**
     * Creates a <code>XInclude</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInclude
     */
    public XInclude createXInclude(String uri) throws IOException, SAXException, ParserConfigurationException {
        XInclude xInclude_ = createXInclude();
        xInclude_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInclude_);
    }

    /**
     * Creates a <code>XModule</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XModule
     */
    public XModule createXModule(String uri) throws IOException, SAXException, ParserConfigurationException {
        XModule xModule_ = createXModule();
        xModule_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xModule_);
    }

    /**
     * Creates a <code>XBody</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XBody
     */
    public XBody createXBody(String uri) throws IOException, SAXException, ParserConfigurationException {
        XBody xBody_ = createXBody();
        xBody_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xBody_);
    }

    /**
     * Creates a <code>XStartGlyphElement</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XStartGlyphElement
     */
    public XStartGlyphElement createXStartGlyphElement(String uri) throws IOException, SAXException, ParserConfigurationException {
        XStartGlyphElement xStartGlyphElement_ = createXStartGlyphElement();
        xStartGlyphElement_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xStartGlyphElement_);
    }

    /**
     * Creates a <code>XControlPoint</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XControlPoint
     */
    public XControlPoint createXControlPoint(String uri) throws IOException, SAXException, ParserConfigurationException {
        XControlPoint xControlPoint_ = createXControlPoint();
        xControlPoint_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xControlPoint_);
    }

    /**
     * Creates a <code>XHint</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHint
     */
    public XHint createXHint(String uri) throws IOException, SAXException, ParserConfigurationException {
        XHint xHint_ = createXHint();
        xHint_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHint_);
    }

    /**
     * Creates a <code>XContourPoint</code>
     * by the String representation of URI <code>uri</code>.
     * This method is a template method for concrete classes.
     *
     * @param uri
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XContourPoint
     */
    public XContourPoint createXContourPoint(String uri) throws IOException, SAXException, ParserConfigurationException {
        XContourPoint xContourPoint_ = createXContourPoint();
        xContourPoint_.setup(UJAXP.getDocument(uri, baseUri, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xContourPoint_);
    }

    /**
     * Creates a <code>XParamListParam</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XParamListParam
     */
    public XParamListParam createXParamListParam(URL url) throws IOException, SAXException, ParserConfigurationException {
        XParamListParam xParamListParam_ = createXParamListParam();
        xParamListParam_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xParamListParam_);
    }

    /**
     * Creates a <code>XHeadGlobal</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHeadGlobal
     */
    public XHeadGlobal createXHeadGlobal(URL url) throws IOException, SAXException, ParserConfigurationException {
        XHeadGlobal xHeadGlobal_ = createXHeadGlobal();
        xHeadGlobal_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHeadGlobal_);
    }

    /**
     * Creates a <code>XHeadLocal</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHeadLocal
     */
    public XHeadLocal createXHeadLocal(URL url) throws IOException, SAXException, ParserConfigurationException {
        XHeadLocal xHeadLocal_ = createXHeadLocal();
        xHeadLocal_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHeadLocal_);
    }

    /**
     * Creates a <code>XHead</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHead
     */
    public XHead createXHead(URL url) throws IOException, SAXException, ParserConfigurationException {
        XHead xHead_ = createXHead();
        xHead_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHead_);
    }

    /**
     * Creates a <code>XGlyphFile</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XGlyphFile
     */
    public XGlyphFile createXGlyphFile(URL url) throws IOException, SAXException, ParserConfigurationException {
        XGlyphFile xGlyphFile_ = createXGlyphFile();
        xGlyphFile_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xGlyphFile_);
    }

    /**
     * Creates a <code>XContour</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XContour
     */
    public XContour createXContour(URL url) throws IOException, SAXException, ParserConfigurationException {
        XContour xContour_ = createXContour();
        xContour_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xContour_);
    }

    /**
     * Creates a <code>XPoint2d</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XPoint2d
     */
    public XPoint2d createXPoint2d(URL url) throws IOException, SAXException, ParserConfigurationException {
        XPoint2d xPoint2d_ = createXPoint2d();
        xPoint2d_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xPoint2d_);
    }

    /**
     * Creates a <code>XInvokePos</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokePos
     */
    public XInvokePos createXInvokePos(URL url) throws IOException, SAXException, ParserConfigurationException {
        XInvokePos xInvokePos_ = createXInvokePos();
        xInvokePos_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokePos_);
    }

    /**
     * Creates a <code>XInvokeArg</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokeArg
     */
    public XInvokeArg createXInvokeArg(URL url) throws IOException, SAXException, ParserConfigurationException {
        XInvokeArg xInvokeArg_ = createXInvokeArg();
        xInvokeArg_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokeArg_);
    }

    /**
     * Creates a <code>XInvokeVarg</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokeVarg
     */
    public XInvokeVarg createXInvokeVarg(URL url) throws IOException, SAXException, ParserConfigurationException {
        XInvokeVarg xInvokeVarg_ = createXInvokeVarg();
        xInvokeVarg_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokeVarg_);
    }

    /**
     * Creates a <code>XInvoke</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvoke
     */
    public XInvoke createXInvoke(URL url) throws IOException, SAXException, ParserConfigurationException {
        XInvoke xInvoke_ = createXInvoke();
        xInvoke_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvoke_);
    }

    /**
     * Creates a <code>XInclude</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInclude
     */
    public XInclude createXInclude(URL url) throws IOException, SAXException, ParserConfigurationException {
        XInclude xInclude_ = createXInclude();
        xInclude_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInclude_);
    }

    /**
     * Creates a <code>XModule</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XModule
     */
    public XModule createXModule(URL url) throws IOException, SAXException, ParserConfigurationException {
        XModule xModule_ = createXModule();
        xModule_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xModule_);
    }

    /**
     * Creates a <code>XBody</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XBody
     */
    public XBody createXBody(URL url) throws IOException, SAXException, ParserConfigurationException {
        XBody xBody_ = createXBody();
        xBody_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xBody_);
    }

    /**
     * Creates a <code>XStartGlyphElement</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XStartGlyphElement
     */
    public XStartGlyphElement createXStartGlyphElement(URL url) throws IOException, SAXException, ParserConfigurationException {
        XStartGlyphElement xStartGlyphElement_ = createXStartGlyphElement();
        xStartGlyphElement_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xStartGlyphElement_);
    }

    /**
     * Creates a <code>XControlPoint</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XControlPoint
     */
    public XControlPoint createXControlPoint(URL url) throws IOException, SAXException, ParserConfigurationException {
        XControlPoint xControlPoint_ = createXControlPoint();
        xControlPoint_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xControlPoint_);
    }

    /**
     * Creates a <code>XHint</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHint
     */
    public XHint createXHint(URL url) throws IOException, SAXException, ParserConfigurationException {
        XHint xHint_ = createXHint();
        xHint_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHint_);
    }

    /**
     * Creates a <code>XContourPoint</code> by the URL <code>url</code>.
     * This method is a template method for concrete classes.
     *
     * @param url
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XContourPoint
     */
    public XContourPoint createXContourPoint(URL url) throws IOException, SAXException, ParserConfigurationException {
        XContourPoint xContourPoint_ = createXContourPoint();
        xContourPoint_.setup(UJAXP.getDocument(url, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xContourPoint_);
    }

    /**
     * Creates a <code>XParamListParam</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XParamListParam
     */
    public XParamListParam createXParamListParam(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XParamListParam xParamListParam_ = createXParamListParam();
        xParamListParam_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xParamListParam_);
    }

    /**
     * Creates a <code>XHeadGlobal</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHeadGlobal
     */
    public XHeadGlobal createXHeadGlobal(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XHeadGlobal xHeadGlobal_ = createXHeadGlobal();
        xHeadGlobal_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHeadGlobal_);
    }

    /**
     * Creates a <code>XHeadLocal</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHeadLocal
     */
    public XHeadLocal createXHeadLocal(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XHeadLocal xHeadLocal_ = createXHeadLocal();
        xHeadLocal_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHeadLocal_);
    }

    /**
     * Creates a <code>XHead</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHead
     */
    public XHead createXHead(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XHead xHead_ = createXHead();
        xHead_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHead_);
    }

    /**
     * Creates a <code>XGlyphFile</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XGlyphFile
     */
    public XGlyphFile createXGlyphFile(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XGlyphFile xGlyphFile_ = createXGlyphFile();
        xGlyphFile_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xGlyphFile_);
    }

    /**
     * Creates a <code>XContour</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XContour
     */
    public XContour createXContour(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XContour xContour_ = createXContour();
        xContour_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xContour_);
    }

    /**
     * Creates a <code>XPoint2d</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XPoint2d
     */
    public XPoint2d createXPoint2d(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XPoint2d xPoint2d_ = createXPoint2d();
        xPoint2d_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xPoint2d_);
    }

    /**
     * Creates a <code>XInvokePos</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokePos
     */
    public XInvokePos createXInvokePos(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XInvokePos xInvokePos_ = createXInvokePos();
        xInvokePos_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokePos_);
    }

    /**
     * Creates a <code>XInvokeArg</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokeArg
     */
    public XInvokeArg createXInvokeArg(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XInvokeArg xInvokeArg_ = createXInvokeArg();
        xInvokeArg_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokeArg_);
    }

    /**
     * Creates a <code>XInvokeVarg</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokeVarg
     */
    public XInvokeVarg createXInvokeVarg(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XInvokeVarg xInvokeVarg_ = createXInvokeVarg();
        xInvokeVarg_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokeVarg_);
    }

    /**
     * Creates a <code>XInvoke</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvoke
     */
    public XInvoke createXInvoke(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XInvoke xInvoke_ = createXInvoke();
        xInvoke_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvoke_);
    }

    /**
     * Creates a <code>XInclude</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInclude
     */
    public XInclude createXInclude(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XInclude xInclude_ = createXInclude();
        xInclude_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInclude_);
    }

    /**
     * Creates a <code>XModule</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XModule
     */
    public XModule createXModule(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XModule xModule_ = createXModule();
        xModule_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xModule_);
    }

    /**
     * Creates a <code>XBody</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XBody
     */
    public XBody createXBody(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XBody xBody_ = createXBody();
        xBody_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xBody_);
    }

    /**
     * Creates a <code>XStartGlyphElement</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XStartGlyphElement
     */
    public XStartGlyphElement createXStartGlyphElement(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XStartGlyphElement xStartGlyphElement_ = createXStartGlyphElement();
        xStartGlyphElement_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xStartGlyphElement_);
    }

    /**
     * Creates a <code>XControlPoint</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XControlPoint
     */
    public XControlPoint createXControlPoint(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XControlPoint xControlPoint_ = createXControlPoint();
        xControlPoint_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xControlPoint_);
    }

    /**
     * Creates a <code>XHint</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHint
     */
    public XHint createXHint(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XHint xHint_ = createXHint();
        xHint_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHint_);
    }

    /**
     * Creates a <code>XContourPoint</code> by the InputStream <code>in</code>.
     * This method is a template method for concrete classes.
     *
     * @param in
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XContourPoint
     */
    public XContourPoint createXContourPoint(InputStream in) throws IOException, SAXException, ParserConfigurationException {
        XContourPoint xContourPoint_ = createXContourPoint();
        xContourPoint_.setup(UJAXP.getDocument(in, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xContourPoint_);
    }

    /**
     * Creates a <code>XParamListParam</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XParamListParam
     */
    public XParamListParam createXParamListParam(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XParamListParam xParamListParam_ = createXParamListParam();
        xParamListParam_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xParamListParam_);
    }

    /**
     * Creates a <code>XHeadGlobal</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHeadGlobal
     */
    public XHeadGlobal createXHeadGlobal(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XHeadGlobal xHeadGlobal_ = createXHeadGlobal();
        xHeadGlobal_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHeadGlobal_);
    }

    /**
     * Creates a <code>XHeadLocal</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHeadLocal
     */
    public XHeadLocal createXHeadLocal(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XHeadLocal xHeadLocal_ = createXHeadLocal();
        xHeadLocal_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHeadLocal_);
    }

    /**
     * Creates a <code>XHead</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHead
     */
    public XHead createXHead(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XHead xHead_ = createXHead();
        xHead_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHead_);
    }

    /**
     * Creates a <code>XGlyphFile</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XGlyphFile
     */
    public XGlyphFile createXGlyphFile(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XGlyphFile xGlyphFile_ = createXGlyphFile();
        xGlyphFile_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xGlyphFile_);
    }

    /**
     * Creates a <code>XContour</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XContour
     */
    public XContour createXContour(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XContour xContour_ = createXContour();
        xContour_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xContour_);
    }

    /**
     * Creates a <code>XPoint2d</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XPoint2d
     */
    public XPoint2d createXPoint2d(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XPoint2d xPoint2d_ = createXPoint2d();
        xPoint2d_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xPoint2d_);
    }

    /**
     * Creates a <code>XInvokePos</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokePos
     */
    public XInvokePos createXInvokePos(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XInvokePos xInvokePos_ = createXInvokePos();
        xInvokePos_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokePos_);
    }

    /**
     * Creates a <code>XInvokeArg</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokeArg
     */
    public XInvokeArg createXInvokeArg(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XInvokeArg xInvokeArg_ = createXInvokeArg();
        xInvokeArg_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokeArg_);
    }

    /**
     * Creates a <code>XInvokeVarg</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokeVarg
     */
    public XInvokeVarg createXInvokeVarg(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XInvokeVarg xInvokeVarg_ = createXInvokeVarg();
        xInvokeVarg_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokeVarg_);
    }

    /**
     * Creates a <code>XInvoke</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvoke
     */
    public XInvoke createXInvoke(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XInvoke xInvoke_ = createXInvoke();
        xInvoke_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvoke_);
    }

    /**
     * Creates a <code>XInclude</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInclude
     */
    public XInclude createXInclude(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XInclude xInclude_ = createXInclude();
        xInclude_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInclude_);
    }

    /**
     * Creates a <code>XModule</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XModule
     */
    public XModule createXModule(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XModule xModule_ = createXModule();
        xModule_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xModule_);
    }

    /**
     * Creates a <code>XBody</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XBody
     */
    public XBody createXBody(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XBody xBody_ = createXBody();
        xBody_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xBody_);
    }

    /**
     * Creates a <code>XStartGlyphElement</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XStartGlyphElement
     */
    public XStartGlyphElement createXStartGlyphElement(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XStartGlyphElement xStartGlyphElement_ = createXStartGlyphElement();
        xStartGlyphElement_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xStartGlyphElement_);
    }

    /**
     * Creates a <code>XControlPoint</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XControlPoint
     */
    public XControlPoint createXControlPoint(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XControlPoint xControlPoint_ = createXControlPoint();
        xControlPoint_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xControlPoint_);
    }

    /**
     * Creates a <code>XHint</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHint
     */
    public XHint createXHint(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XHint xHint_ = createXHint();
        xHint_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHint_);
    }

    /**
     * Creates a <code>XContourPoint</code> by the InputSource <code>is</code>.
     * This method is a template method for concrete classes.
     *
     * @param is
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XContourPoint
     */
    public XContourPoint createXContourPoint(InputSource is) throws IOException, SAXException, ParserConfigurationException {
        XContourPoint xContourPoint_ = createXContourPoint();
        xContourPoint_.setup(UJAXP.getDocument(is, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xContourPoint_);
    }

    /**
     * Creates a <code>XParamListParam</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XParamListParam
     */
    public XParamListParam createXParamListParam(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XParamListParam xParamListParam_ = createXParamListParam();
        xParamListParam_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xParamListParam_);
    }

    /**
     * Creates a <code>XHeadGlobal</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHeadGlobal
     */
    public XHeadGlobal createXHeadGlobal(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XHeadGlobal xHeadGlobal_ = createXHeadGlobal();
        xHeadGlobal_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHeadGlobal_);
    }

    /**
     * Creates a <code>XHeadLocal</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHeadLocal
     */
    public XHeadLocal createXHeadLocal(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XHeadLocal xHeadLocal_ = createXHeadLocal();
        xHeadLocal_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHeadLocal_);
    }

    /**
     * Creates a <code>XHead</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHead
     */
    public XHead createXHead(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XHead xHead_ = createXHead();
        xHead_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHead_);
    }

    /**
     * Creates a <code>XGlyphFile</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XGlyphFile
     */
    public XGlyphFile createXGlyphFile(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XGlyphFile xGlyphFile_ = createXGlyphFile();
        xGlyphFile_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xGlyphFile_);
    }

    /**
     * Creates a <code>XContour</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XContour
     */
    public XContour createXContour(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XContour xContour_ = createXContour();
        xContour_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xContour_);
    }

    /**
     * Creates a <code>XPoint2d</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XPoint2d
     */
    public XPoint2d createXPoint2d(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XPoint2d xPoint2d_ = createXPoint2d();
        xPoint2d_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xPoint2d_);
    }

    /**
     * Creates a <code>XInvokePos</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokePos
     */
    public XInvokePos createXInvokePos(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XInvokePos xInvokePos_ = createXInvokePos();
        xInvokePos_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokePos_);
    }

    /**
     * Creates a <code>XInvokeArg</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokeArg
     */
    public XInvokeArg createXInvokeArg(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XInvokeArg xInvokeArg_ = createXInvokeArg();
        xInvokeArg_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokeArg_);
    }

    /**
     * Creates a <code>XInvokeVarg</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvokeVarg
     */
    public XInvokeVarg createXInvokeVarg(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XInvokeVarg xInvokeVarg_ = createXInvokeVarg();
        xInvokeVarg_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvokeVarg_);
    }

    /**
     * Creates a <code>XInvoke</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInvoke
     */
    public XInvoke createXInvoke(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XInvoke xInvoke_ = createXInvoke();
        xInvoke_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInvoke_);
    }

    /**
     * Creates a <code>XInclude</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XInclude
     */
    public XInclude createXInclude(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XInclude xInclude_ = createXInclude();
        xInclude_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xInclude_);
    }

    /**
     * Creates a <code>XModule</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XModule
     */
    public XModule createXModule(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XModule xModule_ = createXModule();
        xModule_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xModule_);
    }

    /**
     * Creates a <code>XBody</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XBody
     */
    public XBody createXBody(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XBody xBody_ = createXBody();
        xBody_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xBody_);
    }

    /**
     * Creates a <code>XStartGlyphElement</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XStartGlyphElement
     */
    public XStartGlyphElement createXStartGlyphElement(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XStartGlyphElement xStartGlyphElement_ = createXStartGlyphElement();
        xStartGlyphElement_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xStartGlyphElement_);
    }

    /**
     * Creates a <code>XControlPoint</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XControlPoint
     */
    public XControlPoint createXControlPoint(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XControlPoint xControlPoint_ = createXControlPoint();
        xControlPoint_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xControlPoint_);
    }

    /**
     * Creates a <code>XHint</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XHint
     */
    public XHint createXHint(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XHint xHint_ = createXHint();
        xHint_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xHint_);
    }

    /**
     * Creates a <code>XContourPoint</code> by the Reader <code>reader</code>.
     * This method is a template method for concrete classes.
     *
     * @param reader
     * @exception IOException
     * @exception SAXException
     * @exception ParserConfigurationException
     * @return XContourPoint
     */
    public XContourPoint createXContourPoint(Reader reader) throws IOException, SAXException, ParserConfigurationException {
        XContourPoint xContourPoint_ = createXContourPoint();
        xContourPoint_.setup(UJAXP.getDocument(reader, UJAXP.FLAG_NONE, errorHandler, entityResolver));
        return (xContourPoint_);
    }

    /**
     * Creates a <code>XParamListParam</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XParamListParam
     */
    public XParamListParam createXParamListParam(XParamListParam source) {
        XParamListParam xParamListParam_ = createXParamListParam();
        xParamListParam_.setup(source);
        return (xParamListParam_);
    }

    /**
     * Creates a <code>XHeadGlobal</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XHeadGlobal
     */
    public XHeadGlobal createXHeadGlobal(XHeadGlobal source) {
        XHeadGlobal xHeadGlobal_ = createXHeadGlobal();
        xHeadGlobal_.setup(source);
        return (xHeadGlobal_);
    }

    /**
     * Creates a <code>XHeadLocal</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XHeadLocal
     */
    public XHeadLocal createXHeadLocal(XHeadLocal source) {
        XHeadLocal xHeadLocal_ = createXHeadLocal();
        xHeadLocal_.setup(source);
        return (xHeadLocal_);
    }

    /**
     * Creates a <code>XHead</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XHead
     */
    public XHead createXHead(XHead source) {
        XHead xHead_ = createXHead();
        xHead_.setup(source);
        return (xHead_);
    }

    /**
     * Creates a <code>XGlyphFile</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XGlyphFile
     */
    public XGlyphFile createXGlyphFile(XGlyphFile source) {
        XGlyphFile xGlyphFile_ = createXGlyphFile();
        xGlyphFile_.setup(source);
        return (xGlyphFile_);
    }

    /**
     * Creates a <code>XContour</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XContour
     */
    public XContour createXContour(XContour source) {
        XContour xContour_ = createXContour();
        xContour_.setup(source);
        return (xContour_);
    }

    /**
     * Creates a <code>XPoint2d</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XPoint2d
     */
    public XPoint2d createXPoint2d(XPoint2d source) {
        XPoint2d xPoint2d_ = createXPoint2d();
        xPoint2d_.setup(source);
        return (xPoint2d_);
    }

    /**
     * Creates a <code>XInvokePos</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XInvokePos
     */
    public XInvokePos createXInvokePos(XInvokePos source) {
        XInvokePos xInvokePos_ = createXInvokePos();
        xInvokePos_.setup(source);
        return (xInvokePos_);
    }

    /**
     * Creates a <code>XInvokeArg</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XInvokeArg
     */
    public XInvokeArg createXInvokeArg(XInvokeArg source) {
        XInvokeArg xInvokeArg_ = createXInvokeArg();
        xInvokeArg_.setup(source);
        return (xInvokeArg_);
    }

    /**
     * Creates a <code>XInvokeVarg</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XInvokeVarg
     */
    public XInvokeVarg createXInvokeVarg(XInvokeVarg source) {
        XInvokeVarg xInvokeVarg_ = createXInvokeVarg();
        xInvokeVarg_.setup(source);
        return (xInvokeVarg_);
    }

    /**
     * Creates a <code>XInvoke</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XInvoke
     */
    public XInvoke createXInvoke(XInvoke source) {
        XInvoke xInvoke_ = createXInvoke();
        xInvoke_.setup(source);
        return (xInvoke_);
    }

    /**
     * Creates a <code>XInclude</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XInclude
     */
    public XInclude createXInclude(XInclude source) {
        XInclude xInclude_ = createXInclude();
        xInclude_.setup(source);
        return (xInclude_);
    }

    /**
     * Creates a <code>XModule</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XModule
     */
    public XModule createXModule(XModule source) {
        XModule xModule_ = createXModule();
        xModule_.setup(source);
        return (xModule_);
    }

    /**
     * Creates a <code>XBody</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XBody
     */
    public XBody createXBody(XBody source) {
        XBody xBody_ = createXBody();
        xBody_.setup(source);
        return (xBody_);
    }

    /**
     * Creates a <code>XStartGlyphElement</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XStartGlyphElement
     */
    public XStartGlyphElement createXStartGlyphElement(XStartGlyphElement source) {
        XStartGlyphElement xStartGlyphElement_ = createXStartGlyphElement();
        xStartGlyphElement_.setup(source);
        return (xStartGlyphElement_);
    }

    /**
     * Creates a <code>XControlPoint</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XControlPoint
     */
    public XControlPoint createXControlPoint(XControlPoint source) {
        XControlPoint xControlPoint_ = createXControlPoint();
        xControlPoint_.setup(source);
        return (xControlPoint_);
    }

    /**
     * Creates a <code>XHint</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XHint
     */
    public XHint createXHint(XHint source) {
        XHint xHint_ = createXHint();
        xHint_.setup(source);
        return (xHint_);
    }

    /**
     * Creates a <code>XContourPoint</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XContourPoint
     */
    public XContourPoint createXContourPoint(XContourPoint source) {
        XContourPoint xContourPoint_ = createXContourPoint();
        xContourPoint_.setup(source);
        return (xContourPoint_);
    }

    /**
     * Creates a <code>XParamListParam</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XParamListParam
     */
    public XParamListParam createXParamListParam(Document doc) {
        XParamListParam xParamListParam_ = createXParamListParam();
        xParamListParam_.setup(doc);
        return (xParamListParam_);
    }

    /**
     * Creates a <code>XHeadGlobal</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XHeadGlobal
     */
    public XHeadGlobal createXHeadGlobal(Document doc) {
        XHeadGlobal xHeadGlobal_ = createXHeadGlobal();
        xHeadGlobal_.setup(doc);
        return (xHeadGlobal_);
    }

    /**
     * Creates a <code>XHeadLocal</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XHeadLocal
     */
    public XHeadLocal createXHeadLocal(Document doc) {
        XHeadLocal xHeadLocal_ = createXHeadLocal();
        xHeadLocal_.setup(doc);
        return (xHeadLocal_);
    }

    /**
     * Creates a <code>XHead</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XHead
     */
    public XHead createXHead(Document doc) {
        XHead xHead_ = createXHead();
        xHead_.setup(doc);
        return (xHead_);
    }

    /**
     * Creates a <code>XGlyphFile</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XGlyphFile
     */
    public XGlyphFile createXGlyphFile(Document doc) {
        XGlyphFile xGlyphFile_ = createXGlyphFile();
        xGlyphFile_.setup(doc);
        return (xGlyphFile_);
    }

    /**
     * Creates a <code>XContour</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XContour
     */
    public XContour createXContour(Document doc) {
        XContour xContour_ = createXContour();
        xContour_.setup(doc);
        return (xContour_);
    }

    /**
     * Creates a <code>XPoint2d</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XPoint2d
     */
    public XPoint2d createXPoint2d(Document doc) {
        XPoint2d xPoint2d_ = createXPoint2d();
        xPoint2d_.setup(doc);
        return (xPoint2d_);
    }

    /**
     * Creates a <code>XInvokePos</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XInvokePos
     */
    public XInvokePos createXInvokePos(Document doc) {
        XInvokePos xInvokePos_ = createXInvokePos();
        xInvokePos_.setup(doc);
        return (xInvokePos_);
    }

    /**
     * Creates a <code>XInvokeArg</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XInvokeArg
     */
    public XInvokeArg createXInvokeArg(Document doc) {
        XInvokeArg xInvokeArg_ = createXInvokeArg();
        xInvokeArg_.setup(doc);
        return (xInvokeArg_);
    }

    /**
     * Creates a <code>XInvokeVarg</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XInvokeVarg
     */
    public XInvokeVarg createXInvokeVarg(Document doc) {
        XInvokeVarg xInvokeVarg_ = createXInvokeVarg();
        xInvokeVarg_.setup(doc);
        return (xInvokeVarg_);
    }

    /**
     * Creates a <code>XInvoke</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XInvoke
     */
    public XInvoke createXInvoke(Document doc) {
        XInvoke xInvoke_ = createXInvoke();
        xInvoke_.setup(doc);
        return (xInvoke_);
    }

    /**
     * Creates a <code>XInclude</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XInclude
     */
    public XInclude createXInclude(Document doc) {
        XInclude xInclude_ = createXInclude();
        xInclude_.setup(doc);
        return (xInclude_);
    }

    /**
     * Creates a <code>XModule</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XModule
     */
    public XModule createXModule(Document doc) {
        XModule xModule_ = createXModule();
        xModule_.setup(doc);
        return (xModule_);
    }

    /**
     * Creates a <code>XBody</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XBody
     */
    public XBody createXBody(Document doc) {
        XBody xBody_ = createXBody();
        xBody_.setup(doc);
        return (xBody_);
    }

    /**
     * Creates a <code>XStartGlyphElement</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XStartGlyphElement
     */
    public XStartGlyphElement createXStartGlyphElement(Document doc) {
        XStartGlyphElement xStartGlyphElement_ = createXStartGlyphElement();
        xStartGlyphElement_.setup(doc);
        return (xStartGlyphElement_);
    }

    /**
     * Creates a <code>XControlPoint</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XControlPoint
     */
    public XControlPoint createXControlPoint(Document doc) {
        XControlPoint xControlPoint_ = createXControlPoint();
        xControlPoint_.setup(doc);
        return (xControlPoint_);
    }

    /**
     * Creates a <code>XHint</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XHint
     */
    public XHint createXHint(Document doc) {
        XHint xHint_ = createXHint();
        xHint_.setup(doc);
        return (xHint_);
    }

    /**
     * Creates a <code>XContourPoint</code> by the Document <code>doc</code>.
     * This method is a template method for concrete classes.
     *
     * @param doc
     * @return XContourPoint
     */
    public XContourPoint createXContourPoint(Document doc) {
        XContourPoint xContourPoint_ = createXContourPoint();
        xContourPoint_.setup(doc);
        return (xContourPoint_);
    }

    /**
     * Creates a <code>XParamListParam</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XParamListParam
     */
    public XParamListParam createXParamListParam(Element element) {
        XParamListParam xParamListParam_ = createXParamListParam();
        xParamListParam_.setup(element);
        return (xParamListParam_);
    }

    /**
     * Creates a <code>XHeadGlobal</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XHeadGlobal
     */
    public XHeadGlobal createXHeadGlobal(Element element) {
        XHeadGlobal xHeadGlobal_ = createXHeadGlobal();
        xHeadGlobal_.setup(element);
        return (xHeadGlobal_);
    }

    /**
     * Creates a <code>XHeadLocal</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XHeadLocal
     */
    public XHeadLocal createXHeadLocal(Element element) {
        XHeadLocal xHeadLocal_ = createXHeadLocal();
        xHeadLocal_.setup(element);
        return (xHeadLocal_);
    }

    /**
     * Creates a <code>XHead</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XHead
     */
    public XHead createXHead(Element element) {
        XHead xHead_ = createXHead();
        xHead_.setup(element);
        return (xHead_);
    }

    /**
     * Creates a <code>XGlyphFile</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XGlyphFile
     */
    public XGlyphFile createXGlyphFile(Element element) {
        XGlyphFile xGlyphFile_ = createXGlyphFile();
        xGlyphFile_.setup(element);
        return (xGlyphFile_);
    }

    /**
     * Creates a <code>XContour</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XContour
     */
    public XContour createXContour(Element element) {
        XContour xContour_ = createXContour();
        xContour_.setup(element);
        return (xContour_);
    }

    /**
     * Creates a <code>XPoint2d</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XPoint2d
     */
    public XPoint2d createXPoint2d(Element element) {
        XPoint2d xPoint2d_ = createXPoint2d();
        xPoint2d_.setup(element);
        return (xPoint2d_);
    }

    /**
     * Creates a <code>XInvokePos</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XInvokePos
     */
    public XInvokePos createXInvokePos(Element element) {
        XInvokePos xInvokePos_ = createXInvokePos();
        xInvokePos_.setup(element);
        return (xInvokePos_);
    }

    /**
     * Creates a <code>XInvokeArg</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XInvokeArg
     */
    public XInvokeArg createXInvokeArg(Element element) {
        XInvokeArg xInvokeArg_ = createXInvokeArg();
        xInvokeArg_.setup(element);
        return (xInvokeArg_);
    }

    /**
     * Creates a <code>XInvokeVarg</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XInvokeVarg
     */
    public XInvokeVarg createXInvokeVarg(Element element) {
        XInvokeVarg xInvokeVarg_ = createXInvokeVarg();
        xInvokeVarg_.setup(element);
        return (xInvokeVarg_);
    }

    /**
     * Creates a <code>XInvoke</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XInvoke
     */
    public XInvoke createXInvoke(Element element) {
        XInvoke xInvoke_ = createXInvoke();
        xInvoke_.setup(element);
        return (xInvoke_);
    }

    /**
     * Creates a <code>XInclude</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XInclude
     */
    public XInclude createXInclude(Element element) {
        XInclude xInclude_ = createXInclude();
        xInclude_.setup(element);
        return (xInclude_);
    }

    /**
     * Creates a <code>XModule</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XModule
     */
    public XModule createXModule(Element element) {
        XModule xModule_ = createXModule();
        xModule_.setup(element);
        return (xModule_);
    }

    /**
     * Creates a <code>XBody</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XBody
     */
    public XBody createXBody(Element element) {
        XBody xBody_ = createXBody();
        xBody_.setup(element);
        return (xBody_);
    }

    /**
     * Creates a <code>XStartGlyphElement</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XStartGlyphElement
     */
    public XStartGlyphElement createXStartGlyphElement(Element element) {
        XStartGlyphElement xStartGlyphElement_ = createXStartGlyphElement();
        xStartGlyphElement_.setup(element);
        return (xStartGlyphElement_);
    }

    /**
     * Creates a <code>XControlPoint</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XControlPoint
     */
    public XControlPoint createXControlPoint(Element element) {
        XControlPoint xControlPoint_ = createXControlPoint();
        xControlPoint_.setup(element);
        return (xControlPoint_);
    }

    /**
     * Creates a <code>XHint</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XHint
     */
    public XHint createXHint(Element element) {
        XHint xHint_ = createXHint();
        xHint_.setup(element);
        return (xHint_);
    }

    /**
     * Creates a <code>XContourPoint</code> by the Element <code>element</code>.
     * This method is a template method for concrete classes.
     *
     * @param element
     * @return XContourPoint
     */
    public XContourPoint createXContourPoint(Element element) {
        XContourPoint xContourPoint_ = createXContourPoint();
        xContourPoint_.setup(element);
        return (xContourPoint_);
    }

    /**
     * Creates a <code>XParamListParam</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XParamListParam
     */
    public XParamListParam createXParamListParam(RStack stack) {
        XParamListParam xParamListParam_ = createXParamListParam();
        xParamListParam_.setup(stack);
        return (xParamListParam_);
    }

    /**
     * Creates a <code>XHeadGlobal</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XHeadGlobal
     */
    public XHeadGlobal createXHeadGlobal(RStack stack) {
        XHeadGlobal xHeadGlobal_ = createXHeadGlobal();
        xHeadGlobal_.setup(stack);
        return (xHeadGlobal_);
    }

    /**
     * Creates a <code>XHeadLocal</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XHeadLocal
     */
    public XHeadLocal createXHeadLocal(RStack stack) {
        XHeadLocal xHeadLocal_ = createXHeadLocal();
        xHeadLocal_.setup(stack);
        return (xHeadLocal_);
    }

    /**
     * Creates a <code>XHead</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XHead
     */
    public XHead createXHead(RStack stack) {
        XHead xHead_ = createXHead();
        xHead_.setup(stack);
        return (xHead_);
    }

    /**
     * Creates a <code>XGlyphFile</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XGlyphFile
     */
    public XGlyphFile createXGlyphFile(RStack stack) {
        XGlyphFile xGlyphFile_ = createXGlyphFile();
        xGlyphFile_.setup(stack);
        return (xGlyphFile_);
    }

    /**
     * Creates a <code>XContour</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XContour
     */
    public XContour createXContour(RStack stack) {
        XContour xContour_ = createXContour();
        xContour_.setup(stack);
        return (xContour_);
    }

    /**
     * Creates a <code>XPoint2d</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XPoint2d
     */
    public XPoint2d createXPoint2d(RStack stack) {
        XPoint2d xPoint2d_ = createXPoint2d();
        xPoint2d_.setup(stack);
        return (xPoint2d_);
    }

    /**
     * Creates a <code>XInvokePos</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XInvokePos
     */
    public XInvokePos createXInvokePos(RStack stack) {
        XInvokePos xInvokePos_ = createXInvokePos();
        xInvokePos_.setup(stack);
        return (xInvokePos_);
    }

    /**
     * Creates a <code>XInvokeArg</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XInvokeArg
     */
    public XInvokeArg createXInvokeArg(RStack stack) {
        XInvokeArg xInvokeArg_ = createXInvokeArg();
        xInvokeArg_.setup(stack);
        return (xInvokeArg_);
    }

    /**
     * Creates a <code>XInvokeVarg</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XInvokeVarg
     */
    public XInvokeVarg createXInvokeVarg(RStack stack) {
        XInvokeVarg xInvokeVarg_ = createXInvokeVarg();
        xInvokeVarg_.setup(stack);
        return (xInvokeVarg_);
    }

    /**
     * Creates a <code>XInvoke</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XInvoke
     */
    public XInvoke createXInvoke(RStack stack) {
        XInvoke xInvoke_ = createXInvoke();
        xInvoke_.setup(stack);
        return (xInvoke_);
    }

    /**
     * Creates a <code>XInclude</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XInclude
     */
    public XInclude createXInclude(RStack stack) {
        XInclude xInclude_ = createXInclude();
        xInclude_.setup(stack);
        return (xInclude_);
    }

    /**
     * Creates a <code>XModule</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XModule
     */
    public XModule createXModule(RStack stack) {
        XModule xModule_ = createXModule();
        xModule_.setup(stack);
        return (xModule_);
    }

    /**
     * Creates a <code>XBody</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XBody
     */
    public XBody createXBody(RStack stack) {
        XBody xBody_ = createXBody();
        xBody_.setup(stack);
        return (xBody_);
    }

    /**
     * Creates a <code>XStartGlyphElement</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XStartGlyphElement
     */
    public XStartGlyphElement createXStartGlyphElement(RStack stack) {
        XStartGlyphElement xStartGlyphElement_ = createXStartGlyphElement();
        xStartGlyphElement_.setup(stack);
        return (xStartGlyphElement_);
    }

    /**
     * Creates a <code>XControlPoint</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XControlPoint
     */
    public XControlPoint createXControlPoint(RStack stack) {
        XControlPoint xControlPoint_ = createXControlPoint();
        xControlPoint_.setup(stack);
        return (xControlPoint_);
    }

    /**
     * Creates a <code>XHint</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XHint
     */
    public XHint createXHint(RStack stack) {
        XHint xHint_ = createXHint();
        xHint_.setup(stack);
        return (xHint_);
    }

    /**
     * Creates a <code>XContourPoint</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XContourPoint
     */
    public XContourPoint createXContourPoint(RStack stack) {
        XContourPoint xContourPoint_ = createXContourPoint();
        xContourPoint_.setup(stack);
        return (xContourPoint_);
    }

    /**
     * Creates a <code>XParamList</code> by the Stack <code>stack</code>.
     * This mehtod is supposed to be used internally
     * by the Relaxer system.
     * This method is a template method for concrete classes.
     *
     * @param stack
     * @return XParamList
     */
    public XParamList createXParamList(RStack stack) {
        XParamList xParamList_ = createXParamList();
        xParamList_.setup(stack);
        return (xParamList_);
    }

    /**
     * Creates a <code>XParamList</code> by the object <code>source</code>.
     * This method is a template method for concrete classes.
     *
     * @param source
     * @return XParamList
     */
    public XParamList createXParamList(XParamList source) {
        XParamList xParamList_ = createXParamList();
        xParamList_.setup(source);
        return (xParamList_);
    }
}
